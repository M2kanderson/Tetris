{"version":3,"sources":["webpack/bootstrap f8ea38da9e6afb57a39f","./js/main.js","./js/tetris.js","./js/game_view.js","./js/board.js","./js/tetramino.js","./js/block.js","./js/block_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;;AAGA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACPD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChDA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,sBAAsB;AACtC;AACA,mBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnNA;AACA;;AAEA;AACA;;AAEA,kBAAiB,YAAY;AAC7B;AACA,mBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA,oBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;;AAEH;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;AACA;;;AAGA;;AAEA;;;;;;;AC5LA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;;;;ACnKA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA,mBAAkB,OAAO;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f8ea38da9e6afb57a39f\n **/","const Tetris = require('./tetris');\n\n\n$(function(){\n  const rootEl = $('.tetris-game');\n  const blockEl = $('.next-blocks');\n  new Tetris(rootEl, blockEl);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 0\n ** module chunks = 0\n **/","const GameView = require('./game_view');\nconst BlockView = require('./block_view');\nconst Tetramino = require('./tetramino');\n\nconst Tetris = function(rootEl, blockEl){\n  this.rootEl = rootEl;\n  this.blockEl = blockEl;\n  this.gameView = new GameView(rootEl, this);\n  this.blockView = new BlockView(blockEl);\n  this.currentTetramino = new Tetramino(this.gameView.board);\n  this.nextTetramino = new Tetramino(this.gameView.board);\n  this.gameView.board.tetramino = this.currentTetramino;\n  this.blockView.updateView(this.nextTetramino.blocks[0]);\n};\n\nTetris.prototype.newGame = function(){\n  this.gameView = new GameView(this.rootEl, this);\n  this.blockView = new BlockView(this.blockEl);\n  this.currentTetramino = new Tetramino(this.gameView.board);\n  this.nextTetramino = new Tetramino(this.gameView.board);\n  this.gameView.board.tetramino = this.currentTetramino;\n  this.blockView.updateView(this.nextTetramino.blocks[0]);\n};\n\nTetris.prototype.newTetramino = function(){\n  let newTetramino = new Tetramino(this.gameView.board);\n  this.gameView.board.checkGameOver(newTetramino);\n  if(!this.gameView.board.gameOver){\n    this.currentTetramino = this.nextTetramino;\n    this.nextTetramino = newTetramino;\n  }\n\n  this.blockView.updateView(this.nextTetramino.blocks[0]);\n  this.gameView.board.tetramino = this.currentTetramino;\n};\n\nTetris.prototype.swapTetraminos = function(){\n  // let currentPos = this.currentTetramino.pos;\n  // let nextPos = this.nextTetramino.pos;\n  let pieceToSwapIn = this.nextTetramino;\n  this.nextTetramino = this.currentTetramino;\n  // this.nextTetramino.pos = nextPos;\n  this.currentTetramino = pieceToSwapIn;\n  // this.currentTetramino.pos = currentPos;\n  this.blockView.updateView(this.nextTetramino.blocks[0]);\n  this.gameView.board.tetramino = this.currentTetramino;\n};\n\nmodule.exports = Tetris;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/tetris.js\n ** module id = 1\n ** module chunks = 0\n **/","const Board = require(\"./board.js\");\n\n\n\nconst GameView = function($el, game){\n  this.$el = $el;\n  this.game = game;\n  this.board = new Board(10, 20, game);\n  this.setupGrid();\n  this.paused = false;\n  $(\".start-menu\").addClass('show');\n  $(\".start-button\").on(\"click\", this.startGame.bind(this));\n  $(\".restart-button\").on(\"click\", this.restartGame.bind(this));\n};\n\nGameView.STEP_MILLIS = 500;\n\nGameView.prototype.startGame = function(){\n  $(\".start-menu\").removeClass('show');\n  this.intervalId = window.setInterval(\n  this.step.bind(this),\n  GameView.STEP_MILLIS\n  );\n  $(window).on(\"keydown\", this.handleKeyEvent.bind(this));\n  $(window).on(\"keyup\", this.handleKeyUpEvent.bind(this));\n};\n\nGameView.prototype.restartGame = function(){\n  $(\".game-over\").removeClass('show');\n  this.board.gameOver = false;\n  this.game.newGame();\n};\n\nGameView.prototype.setupGrid = function(){\n  let html = \"\";\n  for(let i = 0; i< this.board.height; i++){\n    html += \"<ul>\";\n    for(let j = 0; j < this.board.width; j++){\n      html += \"<li></li>\";\n    }\n    html += \"</ul>\";\n  }\n\n  this.$el.html(html);\n  this.$li = this.$el.find(\"li\");\n};\n\nGameView.prototype.step = function(){\n  if(!this.paused){\n    if(this.board.gameOver){\n      window.clearInterval(this.intervalId);\n      window.clearInterval(this.downIntervalId);\n      this.downIntervalId = null;\n      $(\".game-over\").addClass(\"show\");\n    }\n    if(this.board.updateFallSpeed){\n      this.updateFallSpeed();\n    }\n    this.board.tetramino.move([1,0]);\n    this.render();\n  }\n\n};\n\nGameView.prototype.updateClasses = function() {\n  this.$li.removeClass();\n  this.board.render(this.$li);\n\n};\n\nGameView.prototype.render = function () {\n  if(!this.paused){\n    this.updateClasses();\n  }\n\n};\n\n\nGameView.KEYS = {\n  37: \"left\",\n  39: \"right\",\n  38: \"rotateRight\",\n  40: \"down\",\n  80: \"pause\",\n  32: \"swap\",\n  90: \"rotateLeft\"\n};\n\nGameView.prototype.handleKeyUpEvent = function(event){\n  switch (GameView.KEYS[event.keyCode]) {\n  case \"down\":\n    window.clearInterval(this.downIntervalId);\n    this.downIntervalId = null;\n    break;\n  }\n};\n\nGameView.prototype.togglePause = function(){\n  if(this.intervalId){\n    window.clearInterval(this.intervalId);\n    this.intervalId = null;\n    this.paused = true;\n    $(\".pause-menu\").addClass('show');\n  }else {\n    this.intervalId = window.setInterval(\n    this.step.bind(this),\n    GameView.STEP_MILLIS\n    );\n    this.paused = false;\n    $(\".pause-menu\").removeClass('show');\n  }\n};\n\nGameView.prototype.handleKeyEvent = function(event){\n  switch (GameView.KEYS[event.keyCode]) {\n    case \"left\":\n      event.preventDefault();\n      if(!this.paused && !this.board.gameOver){\n        this.board.tetramino.move([0,-1]);\n        this.render([0,-1]);\n      }\n      break;\n    case \"right\":\n      event.preventDefault();\n      if(!this.paused && !this.board.gameOver){\n        this.board.tetramino.move([0,1]);\n        this.render([0,1]);\n      }\n      break;\n    case \"rotateRight\":\n      event.preventDefault();\n      if(!this.paused && !this.board.gameOver){\n        this.board.tetramino.rotate();\n        this.render();\n      }\n      break;\n    case \"rotateLeft\":\n      event.preventDefault();\n      if(!this.paused && !this.board.gameOver){\n        this.board.tetramino.rotateLeft();\n        this.render();\n      }\n      break;\n    case \"down\":\n      event.preventDefault();\n      if(!this.downIntervalId && !this.board.gameOver && !this.paused){\n        this.downIntervalId = window.setInterval(\n        this.step.bind(this),\n        50\n        );\n      }\n      break;\n    case \"pause\":\n      if(!this.board.gameOver){\n        this.togglePause();\n      }\n      break;\n    case \"swap\":\n      if(!this.board.gameOver)\n      {\n        this.game.swapTetraminos();\n        this.render();\n      }\n  }\n};\n\nGameView.prototype.updateFallSpeed = function(){\n  this.board.updateFallSpeed = false;\n  let stepMillis = 500;\n  let level = Math.floor(this.board.linesCompleted / 10) + 1;\n  switch (level) {\n    case 1:\n      stepMillis = 500;\n      break;\n    case 2:\n      stepMillis = 450;\n      break;\n    case 3:\n      stepMillis = 400;\n      break;\n    case 4:\n      stepMillis = 350;\n      break;\n    case 5:\n      stepMillis = 300;\n      break;\n    case 6:\n      stepMillis = 250;\n      break;\n    case 7:\n      stepMillis = 200;\n      break;\n    case 8:\n      stepMillis = 150;\n      break;\n    case 9:\n      stepMillis = 100;\n      break;\n    default:\n      stepMillis = 50;\n      break;\n\n\n  }\n  window.clearInterval(this.intervalId);\n  this.intervalId = window.setInterval(\n  this.step.bind(this),\n  stepMillis\n  );\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game_view.js\n ** module id = 2\n ** module chunks = 0\n **/","const Tetramino = require('./tetramino');\nconst Block = require('./block');\n\nconst createBoard = function(width, height){\n  let grid = new Array(height);\n\n  for (let i = 0; i < height; i++) {\n    let row = [];\n    for(let j = 0; j < width; j++){\n      row.push(null);\n    }\n    grid[i] = row;\n  }\n  return grid;\n};\n\nconst Board = function(width, height, game){\n  this.width = width;\n  this.height = height;\n  this.game = game;\n  this.blocks = [];\n  this.score = 0;\n  this.linesCompleted = 0;\n  this.updateFallSpeed = false;\n  this.removingRows = false;\n  this.rowsEliminated = {};\n  $(\".score\").text(this.score);\n  this.rowCount = {0: 0, 1: 0, 2: 0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0,\n                  10:0, 11:0, 12:0, 13:0, 14:0, 15:0, 16:0, 17:0, 18:0, 19:0};\n  this.grid = createBoard(width, height);\n  this.tetramino = new Tetramino(this);\n  this.gameOver = false;\n};\n\nBoard.prototype.render = function($li){\n  this.tetramino.render($li);\n  this.blocks.forEach((block) => {\n    let pos = block.pos;\n    let color = block.color;\n    const flatCoord = (pos[0] * this.width) + pos[1];\n    $li.eq(flatCoord).addClass(color);\n  });\n};\n\nBoard.prototype.flashRemovedRows = function($el){\n  let $li = $el.find(\"li\");\n  $li.removeClass();\n  this.blocks.forEach((block) => {\n    let color;\n    if(this.rowsEliminated[block.pos[0]]){\n      color = \"gray\";\n    } else{\n      color = block.color;\n    }\n    // debugger;\n    // let pos = block.pos;\n    const flatCoord = (block.pos[0] * this.width) + block.pos[1];\n    $li.eq(flatCoord).addClass(color);\n  });\n};\n\nBoard.prototype.removeRow = function(row){\n  this.rowCount = {0: 0, 1: 0, 2: 0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0,\n                  10:0, 11:0, 12:0, 13:0, 14:0, 15:0, 16:0, 17:0, 18:0, 19:0};\n\n  let newBlocks =[];\n  this.blocks.forEach((block) =>{\n    // check if the block is in the row to be eliminated\n    if(block.pos[0] !== row){\n      // then we'll check to see if it's above the row that is to be elimated\n      if(block.pos[0] < row){\n        block.pos[0] += 1;\n      }\n      this.rowCount[block.pos[0]] += 1;\n      newBlocks.push(block);\n    }\n  });\n  // console.log(newBlocks.length);\n  this.blocks = newBlocks;\n\n};\n\nBoard.prototype.addBlocks = function(){\n  this.tetramino.blocks[0].forEach((block) =>{\n    let pos = [block.pos[0] + this.tetramino.pos[0],block.pos[1] + this.tetramino.pos[1]];\n    this.grid[pos[0]][pos[1]] = block;\n    let newBlock = new Block(pos, block.color);\n    this.blocks.push(newBlock);\n    this.rowCount[pos[0]] += 1;\n  });\n  // console.log(this.rowCount);\n};\n\nBoard.prototype.collisionWithBlock = function(pos){\n  return this.tetramino.blocks[0].some((tetBlock) =>{\n    return this.blocks.some((block) =>{\n      return block.pos[0] === tetBlock.pos[0] + pos[0] && block.pos[1] === tetBlock.pos[1] + pos[1];\n    });\n  });\n\n};\n\nBoard.prototype.rotationCollisionWithBlock = function(pos){\n    return this.blocks.some((block) =>{\n      return block.pos[0] === pos[0] && block.pos[1] === pos[1];\n    });\n};\n\nBoard.prototype.withinBounds = function(pos){\n  return this.tetramino.blocks[0].every((block) =>{\n    let nextBlockPos = [block.pos[0] +pos[0], block.pos[1] + pos[1]];\n    return nextBlockPos[1] >= 0 && nextBlockPos[1] < this.width &&\n     nextBlockPos[0] >= 0 && nextBlockPos[0] < this.height;\n  });\n};\n\n// Board.prototype.fallingCollision = function(){\n//   return this.tetramino.blocks[0].some((block) =>{\n//     let nextBlockPos = [block.pos[0] +this.tetramino.pos[0] + 1, block.pos[1] +this.tetramino.pos[1]];\n//     return nextBlockPos[0] >= this.height || this.collisionWithBlock(nextBlockPos);\n//   });\n// };\n//\n// Board.prototype.checkCollisions = function(delta){\n//   if(delta[0] > 0){\n//     if(this.fallingCollision()){\n//       this.tetramino.blocks[0].forEach((block) =>{\n//         let pos = [block.pos[0] + this.tetramino.pos[0],block.pos[1] + this.tetramino.pos[1]];\n//         this.grid[pos[0]][pos[1]] = block;\n//         let newBlock = new Block(pos, block.color);\n//         this.blocks.push(newBlock);\n//       });\n//       this.tetramino = new Tetramino(this);\n//     }\n//   }\n// };\n\n\nBoard.prototype.checkGameOver = function(newTetramino){\n  this.gameOver = newTetramino.blocks[0].some((newBlock) =>{\n    return this.blocks.some((oldBlock) =>{\n      return newBlock.pos[0] + newTetramino.pos[0] === oldBlock.pos[0]\n       && newBlock.pos[1] + + newTetramino.pos[1] === oldBlock.pos[1];\n    });\n  });\n};\n\nBoard.prototype.newTetramino = function(){\n  this.addBlocks();\n  let rowsEliminated = [];\n  Object.keys(this.rowCount).forEach((row) =>{\n    if(parseInt(this.rowCount[row]) >= this.width){\n      this.rowsEliminated[row]= true;\n      // window.setTimeout(this.removeRow.bind(parseInt(row)), 700);\n    }\n  });\n  let rowElimCount = Object.keys(this.rowsEliminated).length;\n  if(rowElimCount > 0){\n    this.removingRows = true;\n  }\n  if(this.removingRows){\n    this.game.gameView.paused = true;\n    this.flashRemovedRows(this.game.rootEl);\n    window.setTimeout(()=>{\n      Object.keys(this.rowsEliminated).forEach((row) =>{\n        this.removeRow(parseInt(row));\n      });\n      this.game.gameView.paused = false;\n      this.removingRows = false;\n      this.rowsEliminated = {};\n\n      this.score += 100*rowElimCount*rowElimCount;\n      this.linesCompleted += rowElimCount;\n      if(rowElimCount > 0 &&\n        (this.linesCompleted - rowElimCount) % 10 > this.linesCompleted % 10){\n        this.updateFallSpeed = true;\n      }\n      $('.lines').text(this.linesCompleted);\n      $('.score').text(this.score);\n      this.game.newTetramino();\n    }, 300);\n  } else {\n    this.game.newTetramino();\n  }\n\n\n};\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/board.js\n ** module id = 3\n ** module chunks = 0\n **/","const Block = require(\"./block.js\");\n\n\nconst POSS_TETRAMINOS = {\n  // 0,0 0,1 0,2 0,3\n  // 1,0 1,1 1,2 1,3\n  // 2,0 2,1 2,2 2,3\n  // 3,0 3,1 3,2 3,3\n\n  rightHook : [\n\n  [[0,0], [1,0], [1,1], [1,2]],\n  [[0,2], [0,1], [1,1], [2,1]],\n  [[1,0], [1,1], [1,2], [2,2]],\n  [[2,0], [2,1], [1,1], [0,1]]\n  ],\n\n  leftHook : [\n\n  [[1,0], [1,1], [1,2], [0,2]],\n  [[0,1], [1,1], [2,1], [2,2]],\n  [[1,2], [1,1], [1,0], [2,0]],\n  [[2,1], [1,1], [0,1], [0,0]]\n  ],\n\n  line : [\n\n  [[1,0], [1,1], [1,2], [1,3]],\n  [[0,2], [1,2], [2,2], [3,2]],\n  [[2,0], [2,1], [2,2], [2,3]],\n  [[0,1], [1,1], [2,1], [3,1]]\n  ],\n  square : [\n\n  [[0,1], [0,2], [1,2], [1,1]],\n  [[0,2], [1,2], [1,1], [0,1]],\n  [[1,2], [1,1], [0,1], [0,2]],\n  [[1,1], [0,1], [0,2], [1,2]],\n  ],\n\n  // 0,0 0,1 0,2 0,3\n  // 1,0 1,1 1,2 1,3\n  // 2,0 2,1 2,2 2,3\n  // 3,0 3,1 3,2 3,3\n  ess : [\n\n  [[1,0], [1,1], [0,1], [0,2]],\n  [[0,1], [1,1], [1,2], [2,2]],\n  [[1,2], [1,1], [2,1], [2,0]],\n  [[2,1], [1,1], [1,0], [0,0]],\n  ],\n  // 0,0 0,1 0,2 0,3\n  // 1,0 1,1 1,2 1,3\n  // 2,0 2,1 2,2 2,3\n  // 3,0 3,1 3,2 3,3\n  zee : [\n\n  [[0,0], [0,1], [1,1], [1,2]],\n  [[0,2], [1,2], [1,1], [2,1]],\n  [[2,2], [2,1], [1,1], [1,0]],\n  [[2,0], [1,0], [1,1], [0,1]],\n  ],\n\n  tee : [\n\n  [[1,0], [1,1], [1,2], [0,1]],\n  [[0,1], [1,1], [2,1], [1,2]],\n  [[1,2], [1,1], [1,0], [2,1]],\n  [[2,1], [1,1], [0,1], [1,0]],\n  ]\n};\n\nconst TETRAMINO_COLORS = {\n  rightHook: \"blue\",\n  leftHook: \"orange\",\n  line: \"light-blue\",\n  square: \"yellow\",\n  ess: \"green\",\n  zee: \"red\",\n  tee: \"purple\"\n};\n\nfunction _tetraminoGrid(){\n  let grid = Array(4);\n  for(let i = 0; i < grid.length; i++){\n    grid[i]= [null,null,null,null];\n  }\n  return grid;\n}\n\nfunction _randomBlockSet(){\n  let keys = Object.keys(POSS_TETRAMINOS);\n  let choice = Math.floor(Math.random()*keys.length);\n  let tetramino = POSS_TETRAMINOS[keys[choice]];\n  let populatedTetramino = _tetraminoGrid();\n  let color = TETRAMINO_COLORS[keys[choice]];\n  tetramino.forEach((orientation, oIndex) =>{\n    orientation.forEach((coord, cIndex) =>{\n      populatedTetramino[oIndex][cIndex] = new Block(coord, color);\n    });\n  });\n  return populatedTetramino;\n}\n\nconst Tetramino = function(board){\n  this.blocks = _randomBlockSet();\n  this.board = board;\n  this.pos = [0,3];\n};\n\nTetramino.prototype.render = function($li){\n  let blocks = this.blocks[0];\n  let tetraminoPos = this.pos;\n  blocks.forEach( block => {\n    let pos = [block.pos[0] + tetraminoPos[0], block.pos[1] + tetraminoPos[1]];\n    let color = block.color;\n    const flatCoord = (pos[0] * this.board.width) + pos[1];\n    $li.eq(flatCoord).addClass(color);\n  });\n};\n\nTetramino.prototype.move = function(vector){\n  let yPos = this.pos[0] + vector[0];\n  let xPos = this.pos[1] + vector[1];\n  let newPos = [yPos, xPos];\n  if(!this.board.collisionWithBlock(newPos) && this.board.withinBounds(newPos)){\n    this.pos = newPos;\n  }\n  else if(vector[0] > 0){\n    this.board.newTetramino();\n  }\n};\n\nTetramino.prototype.rotationCollisions = function(direction){\n  let newOrientationBlocks = direction === \"right\" ?\n   this.blocks[1] : this.blocks[this.blocks.length - 1];\n\n  return newOrientationBlocks.some((block) =>{\n    let pos = [block.pos[0] + this.pos[0], block.pos[1] + this.pos[1]];\n    return pos[0] < 0 || pos[1] < 0\n      || pos[0] >= this.board.height || pos[1] >= this.board.width\n      || this.board.rotationCollisionWithBlock(pos);\n  });\n};\n\nTetramino.prototype.rotate = function(){\n  if(!this.rotationCollisions(\"right\"))\n  {\n    this.blocks.push(this.blocks.shift());\n  }\n\n};\n\nTetramino.prototype.rotateLeft = function(){\n  if(!this.rotationCollisions(\"left\"))\n  {\n    this.blocks.unshift(this.blocks.pop());\n  }\n\n};\n\n\n\nmodule.exports = Tetramino;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/tetramino.js\n ** module id = 4\n ** module chunks = 0\n **/","const Block = function(pos, color){\n  this.pos = pos;\n  this.color = color;\n};\n\nmodule.exports = Block;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/block.js\n ** module id = 5\n ** module chunks = 0\n **/","\n\nconst BlockView = function($el){\n  this.$el = $el;\n  this.setupGrid();\n  this.blocks = [];\n};\n\nBlockView.prototype.setupGrid = function(){\n  let html = \"\";\n  for(let i = 0; i< 4; i++){\n    html += \"<ul>\";\n    for(let j = 0; j < 4; j++){\n      html += \"<li class='next-block'></li>\";\n    }\n    html += \"</ul>\";\n  }\n\n  this.$el.html(html);\n  this.$li = this.$el.find(\"li\");\n};\n\nBlockView.prototype.render = function(blocks){\n  let $li = this.$li;\n  blocks.forEach((block) => {\n    let pos = block.pos;\n    let color = block.color;\n    const flatCoord = ((pos[0]+1) * 4) + pos[1];\n    $li.eq(flatCoord).addClass(color);\n\n  });\n};\n\nBlockView.prototype.updateView = function(blocks) {\n  this.$li.removeClass();\n  this.render(blocks);\n};\n\nmodule.exports = BlockView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/block_view.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}